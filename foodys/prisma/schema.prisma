// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  firstName           String?
  lastName            String?
  nickname            String?              @unique
  email               String?              @unique
  password            String?
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  FavoriteGPlace      FavoriteGPlace[]
  g_place_review_like GPlaceReviewLike[]
  GPlaceReviewAnswer  GPlaceReviewAnswer[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model TextSearch {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  query         String
  places        Json[]
  establishment Establishment
  created_at    DateTime      @default(now())

  @@map("text_search")
}

model PlacePhoto {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  height            Int
  html_attributions String[]
  photo_reference   String   @unique
  width             Int

  @@map("place_photo")
}

model FavoriteGPlace {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  place_id   String
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([user_id, place_id])
  @@map("favorite_g_place")
}

model GPlace {
  id                             String                 @id @default(auto()) @map("_id") @db.ObjectId
  address_components             AddressComponent[]
  adr_address                    String?
  business_status                String?
  curbside_pickup                Boolean?
  current_opening_hours          PlaceOpeningHours?
  delivery                       Boolean?
  dine_in                        Boolean?
  editorial_summary              PlaceEditorialSummary?
  formatted_address              String?
  formatted_phone_number         String?
  geometry                       Geometry?
  icon                           String?
  icon_background_color          String?
  icon_mask_base_uri             String?
  international_phone_number     String?
  name                           String?
  opening_hours                  PlaceOpeningHours?
  permanently_closed             Boolean?
  photos                         TPlacePhoto[]
  place_id                       String?
  plus_code                      PlusCode?
  price_level                    Int?
  rating                         Float?
  reference                      String?
  reservable                     Boolean?
  reviews                        GPlaceReview[]
  scope                          String?
  secondary_opening_hours        PlaceOpeningHours[]
  serves_beer                    Boolean?
  serves_breakfast               Boolean?
  serves_brunch                  Boolean?
  serves_dinner                  Boolean?
  serves_lunch                   Boolean?
  serves_vegetarian_food         Boolean?
  serves_wine                    Boolean?
  takeout                        Boolean?
  types                          String[]
  url                            String?
  user_ratings_total             Int?
  utc_offset                     Int?
  vicinity                       String?
  website                        String?
  wheelchair_accessible_entrance Boolean?
  created_at                     DateTime               @default(now())
  updated_at                     DateTime               @updatedAt

  @@unique([place_id])
  @@map("g_place")
}

model GPlaceReview {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  author_name         String
  rating              Float
  time                Int
  author_url          String?
  language            String?
  original_language   String?
  profile_photo_url   String?
  text                String?
  translated          Boolean?
  local_author_id     String?
  hash                String?
  g_place_id          String               @db.ObjectId
  g_place             GPlace               @relation(fields: [g_place_id], references: [id], onDelete: Cascade)
  g_place_review_like GPlaceReviewLike[]
  g_place_review_answer  GPlaceReviewAnswer[]

  @@unique([g_place_id, hash])
  @@map("g_place_review")
}

model GPlaceReviewAnswer {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  text              String
  g_place_review_id String       @db.ObjectId
  g_place_review    GPlaceReview @relation(fields: [g_place_review_id], references: [id], onDelete: Cascade)
  user_id           String       @db.ObjectId
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at        DateTime     @default(now())

  @@map("g_place_review_answer")
}

model GPlaceReviewLike {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  g_place_review    GPlaceReview @relation(fields: [g_place_review_id], references: [id], onDelete: Cascade)
  user_id           String       @db.ObjectId
  g_place_review_id String       @db.ObjectId

  @@unique([user_id, g_place_review_id])
  @@map("g_place_review_like")
}

model PlaceUrl {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  g_place_id String?

  @@unique([url])
  @@unique([g_place_id])
  @@map("place_url")
}

type Place {
  address_components             AddressComponent[]
  adr_address                    String?
  business_status                String?
  curbside_pickup                Boolean?
  current_opening_hours          PlaceOpeningHours?
  delivery                       Boolean?
  dine_in                        Boolean?
  editorial_summary              PlaceEditorialSummary?
  formatted_address              String?
  formatted_phone_number         String?
  geometry                       Geometry?
  icon                           String?
  icon_background_color          String?
  icon_mask_base_uri             String?
  international_phone_number     String?
  name                           String?
  opening_hours                  PlaceOpeningHours?
  permanently_closed             Boolean?
  photos                         TPlacePhoto[]
  place_id                       String?
  plus_code                      PlusCode?
  price_level                    Int?
  rating                         Float?
  reference                      String?
  reservable                     Boolean?
  reviews                        PlaceReview[]
  scope                          String?
  secondary_opening_hours        PlaceOpeningHours[]
  serves_beer                    Boolean?
  serves_breakfast               Boolean?
  serves_brunch                  Boolean?
  serves_dinner                  Boolean?
  serves_lunch                   Boolean?
  serves_vegetarian_food         Boolean?
  serves_wine                    Boolean?
  takeout                        Boolean?
  types                          String[]
  url                            String?
  user_ratings_total             Int?
  utc_offset                     Int?
  vicinity                       String?
  website                        String?
  wheelchair_accessible_entrance Boolean?
}

type TPlacePhoto {
  height            Int
  html_attributions String[]
  photo_reference   String
  width             Int
}

type AddressComponent {
  long_name  String
  short_name String
  types      String[]
}

type PlaceOpeningHours {
  open_now     Boolean?
  periods      PlaceOpeningHoursPeriod[]
  special_days PlaceSpecialDay[]
  type         String?
  weekday_text String[]
}

type PlaceEditorialSummary {
  language String?
  overview String?
}

type Geometry {
  location LatLngLiteral
  viewport Bounds
}

type PlusCode {
  global_code   String
  compound_code String?
}

type PlaceReview {
  author_name               String
  rating                    Float
  relative_time_description String
  time                      Int
  author_url                String?
  language                  String?
  original_language         String?
  profile_photo_url         String?
  text                      String?
  translated                Boolean?
}

type PlaceOpeningHoursPeriod {
  open  PlaceOpeningHoursPeriodDetail
  close PlaceOpeningHoursPeriodDetail?
}

type PlaceSpecialDay {
  date              String?
  exceptional_hours Boolean?
}

type LatLngLiteral {
  lat Float
  lng Float
}

type Bounds {
  northeast LatLngLiteral
  southwest LatLngLiteral
}

type PlaceOpeningHoursPeriodDetail {
  day       Int
  time      String
  date      String?
  truncated Boolean?
}

enum Establishment {
  RESTAURANT
  COFFEE_AND_TEA
  BAR
}

enum GPlaceReviewType {
  IMPORTED
  LOCAL
}
